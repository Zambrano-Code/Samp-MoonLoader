script_name('MacroDef')
script_version('0.0.1')
script_author('CryGeo')
script_description('Puedes crear macros de muchos formas.')

local dkjson = require("lib/dkjson-master/dkjson")
local moonloader = require("moonloader")

local imgui = require 'mimgui'
local new = imgui.new
local ffi = require 'ffi'


local vk = require 'keysC'
local event = require('moonloader').event


local URL = "config/macrosDef.json"
local config = nil
local settings = nil

--Views
local vCrearMacro =  {
    visible = new.bool(false),
    grabando = false,
    buttonText = "Grabar KeyHot",
    labelText = new.char[0x32](),

    inputNameMacro = new.char[0x32](),
    keysPress = {},
    inputTimeWaitCmd = new.int(1000),
    inputCommands = new.char[0x400](),
    status = new.int(0),
}

local viewCreateEvento =  new.bool(false)
local viewCreateSubComando =  new.bool(false)
local settingView = new.bool(false)

local X, Y = getScreenResolution()

function main()

    wait(1000)
    sendConsoleMessageSamp(string.format(" Script created by %s", "CryGeo"))

    config = getInfor(URL)


    if config then
        local macros = config.Macros
        local acciones = config.Accions
        local subComandos = config.SubComandos

        settings = config.settings
        
        settings.macrosOn = new.bool(settings.macrosOn)
        settings.acctionOn = new.bool(settings.acctionOn)
        settings.subComandosOn = new.bool(settings.subComandosOn)

        ViewSettings(settings)
        viewCrearMacro()

        CargarCommandosConfig(settings)
        CargarMacros(macros)
        CargarAcciones(acciones)
        CargarSubComandos(subComandos)


    end
    
    wait(-1)
end

function ViewSettings(settings)
    imgui.OnFrame(function() return settingView[0] end,
    function()

        imgui.SetNextWindowSize(imgui.ImVec2(194, 120), imgui.Cond.FirstUseEver)
        imgui.SetNextWindowPos(imgui.ImVec2(X / 2, Y / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))

        imgui.Begin("Settings", settingView, imgui.WindowFlags.NoResize + imgui.WindowFlags.AlwaysAutoResize)
    
        
        imgui.Text("Configuracion del procesos.") -- Display some text (you can use a format strings too)
        imgui.Checkbox("Macros On", settings.macrosOn) -- Edit bools storing our window open/close state
        imgui.Checkbox("Acction On", settings.acctionOn)
        imgui.Checkbox("SubCommandos On", settings.subComandosOn)
        imgui.Separator()
        if  imgui.Button("Crear Macro") then  
            vCrearMacro.visible[0] = not vCrearMacro.visible[0] 
            settingView[0] = not settingView[0] 
        end
        imgui.SameLine()        
        if  imgui.Button("Crear Evento")  then  printString("Provando Macro", 3000) end
        imgui.SameLine()        
        if  imgui.Button("Crear Sub Cmd") then  printString("Provando Macro", 3000) end
        imgui.SameLine()        
       
    
        imgui.End()
        
        
    end)
    
end

function viewCrearMacro()
    
    local thread = lua_thread.create_suspended(
        function() 

            vCrearMacro.buttonText = "Detener Grabacion"
            vCrearMacro.grabando = true
            vCrearMacro.keysPress = {}

            while (vCrearMacro.grabando) do 
                local key = vk.get_key_pressed()
                local insert = true

                if(key ~= nil and not existe_en_lista(keys, key)) then
                    
                    if(key.category ~= vk.categorys.KeyAccion) then 
                        vCrearMacro.grabando = false 
                        vCrearMacro.buttonText = "Grabar KeyHot"
                    end
                    
                    if(key.category == vk.categorys.KeyAccion and #vCrearMacro.keysPress >= 2) then 
                        vCrearMacro.grabando = true
                        insert = false
                    end
                    
                    if(insert) then 
                        table.insert(vCrearMacro.keysPress, key)
                        if(vCrearMacro.keysPress ~= nil) then
                            vCrearMacro.labelText = vk.parse_array_keys_from_string(vCrearMacro.keysPress)
                        end
                    end
                end
            end
        end
    )
    

    imgui.OnFrame(function() return vCrearMacro.visible[0] end, 
    function ()
        imgui.SetNextWindowPos(imgui.ImVec2(X / 2, Y / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))
        imgui.SetNextWindowSize(imgui.ImVec2(194, 120), imgui.Cond.FirstUseEver)
        imgui.Begin("New Macro", vCrearMacro.visible, imgui.WindowFlags.NoResize + imgui.WindowFlags.AlwaysAutoResize )
        imgui.InputText("Name", vCrearMacro.inputNameMacro, 30)
        if imgui.Button(vCrearMacro.buttonText) then 

            if not vCrearMacro.grabando then
                thread:run()
            else
                if thread ~= nil then
                    thread:terminate(thread)
                end
                vCrearMacro.labelText = ""
                vCrearMacro.keysPress = {}
                vCrearMacro.buttonText = "Grabar KeyHot"
                vCrearMacro.grabando = false
            end
        end
        imgui.SameLine()
        imgui.Text(vCrearMacro.labelText)
        imgui.InputInt("Time between commands ms", vCrearMacro.inputTimeWaitCmd, 1000, 1000)
        imgui.InputTextMultiline("Commands", vCrearMacro.inputCommands, 0x400,  imgui.ImVec2(0, 100))
        imgui.RadioButtonIntPtr("In Car", vCrearMacro.status, 0)
        imgui.RadioButtonIntPtr("Walking", vCrearMacro.status, 1)
        imgui.RadioButtonIntPtr("All", vCrearMacro.status, 2)
        
        
    end)
end

function tieneDosLetrasNumeros(tabla)
    
    local countLetras = contarElementos(tabla, letras)
    local countNumeros = contarElementos(tabla, numeros)
    local countNumerosTec = contarElementos(tabla, tecladoNumerico)
    
    return countLetras >= 2 or countNumeros >= 2 or countNumerosTec >= 2
end

function tieneDosMenu(tabla)
    
    local countMenu = contarElementos(tabla, menu_keys)
    
    return countMenu >= 2
end

function verificarCombinacion(tabla, key)
    

    local letra = existe_en_lista(letras, key) or existe_en_lista(numeros, key) or existe_en_lista(tecladoNumerico, key)
    local menu = existe_en_lista(menu_keys, key)

    local numLetras = contarElementos(tabla, letras) + contarElementos(tabla, numeros) + contarElementos(tabla, tecladoNumerico)
    local numMenu = contarElementos(tabla, menu_keys)

    return (not letra or numLetras < 2) and (not menu or numMenu < 1)
end

function existe_en_lista(tabla, elemento)
    if tabla == nil then return false end

    for _, v in pairs(tabla) do
        if v == elemento then
            return true
        end
    end
    return false
end

function contarElementos(tabla, elementos)
    local count = 0
    for _, v in ipairs(tabla) do
        if existe_en_lista(elementos, v) then
            count = count + 1
        end
    end
    return count
end

function CargarCommandosConfig(settings)
    sampRegisterChatCommand("md", function() settingView[0] = not settingView[0] end );
    sampRegisterChatCommand("nm", function() vCrearMacro.visible[0] = not vCrearMacro.visible[0] end );
end

function CargarSubComandos(subComandos)
    for _, command in pairs(subComandos) do
        sampRegisterChatCommand(command.cmdInvoque, 
        function() 
            if not settings.subComandosOn[0] then return end
            EjecutarCmd(command.cmds, command.timeWaitCmds, true) 
        end)
    end

end

function CargarAcciones(accions)

    for _, accion in pairs(accions) do
        lua_thread.create(function() CreateAccion(accion) end)
    end
    
end

function CreateAccion(accion)
    local messageOld = {}

    while true do
        wait(50)

        local resultado = GetMessageNew(messageOld)

        local mensajeNew = resultado[1]
        messageOld = resultado[2]
        
        for _, message in pairs(mensajeNew) do
            if cleanAndLower(accion.text) == message then
                ActivarAccion(accion)
            end 
        end

    end 
end


function sendConsoleMessageSamp(msg)
    local index = string.format("{FFFFFF}[ {1FDADC}%s {FFFFFF}]: ", thisScript().name)
    sampAddChatMessage(index .. msg, 0xD6DADC)
end

function getInfor(url)
    local archivo = io.open( GetUrlThis(url), "r")

    if archivo then
        local contenido = archivo:read("*all")
        archivo:close()

        local success, datos = pcall(dkjson.decode, contenido)

        if success then
            return datos
        else
            print("Error al decodificar el archivo JSON:", datos)
        end
    else
        print("Error al abrir el archivo JSON")
    end
end

function GetUrlThis(url)
    return getWorkingDirectory() .. "/" .. url
end 

function CargarMacros(macros)
    sendConsoleMessageSamp("Cargando Macros...")
    for _, macro in ipairs(macros) do
        lua_thread.create( function() CreateMacro(macro) end)
    end
    sendConsoleMessageSamp("Se cargaron " .. #macros .. " macros.")

end

function CreateMacro(macro)
    while true do
        
        wait(20)
        
        local comboPressed = ObtenerCombinacionTecla(macro.keys)

        local estado = isCharInAnyCar(PLAYER_PED)

        if comboPressed  and settings.macrosOn[0]  then

            if macro.inCar == nil then
                EjecutarCmd(macro.cmds, macro.timeWaitCmds)
            elseif macro.inCar and estado then
                EjecutarCmd(macro.cmds, macro.timeWaitCmds)
            elseif not macro.inCar and not estado then  
                EjecutarCmd(macro.cmds, macro.timeWaitCmds)
            end
            
        end
    end
end

function ObtenerCombinacionTecla(keys)
    local longitud  = #keys

    if(longitud == 1) then
        local notKeyPressed = keyNotCombinable(config.keyIgnoreCombinations)
        if notKeyPressed then
            return wasKeyPressed(keys[1])
        end
    end

    local resultado = {}
    
    if(longitud > 1) then
        for i = 1, longitud do

            local keyPress = false
            if i == longitud then
                keyPress = wasKeyPressed(keys[i])
            
            else
                keyPress = isKeyDown(keys[i])
            end

            if keyPress == true then
                table.insert(resultado, keyPress)
            end

        end
        
    end

    if(longitud == #resultado) then
        return todosSonVerdaderos(resultado)
    end

    return false
    
end

function todosSonVerdaderos(array)
    for _, valor in ipairs(array) do
        if not valor then
            return false  -- Si se encuentra un valor falso, devuelve false
        end
    end
    return true  -- Si no se encontraron valores falsos, devuelve true
end

--[[
    Este metodo/funcion debuelve true si ninguna de la teclas de la lista keys esta precionada.
    Caso contrario dara false.
    {"name": "Alt", "value": 160},
]]
function keyNotCombinable(keys)
    local teclaNotRelation = false
    local keyNotPress = true

    for a, key in ipairs(keys) do
        if isKeyDown(key.value) then
            return false
        end
    end

    return true
end

function GetMessageNew(messagesOld)

    local lengLineChat = 10
    local chatNew = {}

    local chatText = {}

    for i = 1, lengLineChat do
        local text = sampGetChatString(100 - i)
        table.insert(chatText, cleanAndLower(text))
    end
    
    if #messagesOld == 0 then
        return {chatNew, chatText} 
    else

        chatNew = {}
        local count = 1
        for i = 1 , lengLineChat do

            local chat1 = chatText[i]
            local chat2 = messagesOld[count]
            
            if(not (chat1 == chat2)) then
                table.insert(chatNew, chat1)
            else
                count = count + 1
            end
          
        end

        return {chatNew, chatText}
        
        
    end
    
end

function ActivarAccion(accion)

    if not settings.acctionOn[0] then return end 

    if(accion.autoActivate) then
        
        EjecutarCmd(accion.cmds, accion.timeWaitCmds)
        
    else

        local mensaje = "Presiona " .. accion.keyName .. " para " .. accion.name
        printString(mensaje, accion.timeWaitActive)

        local tiempoInicio = os.clock()
        local duracionMaxima = accion.timeWaitActive/1000  -- Duración máxima en segundos
        local completo = false

        while (os.clock() - tiempoInicio) < duracionMaxima and not completo do
            wait(20)
            local keyPress = wasKeyPressed(accion.keyActive)
            if keyPress then
                EjecutarCmd(accion.cmds, accion.timeWaitCmds)
                completo = true
                clearPrints()
            end
        end
    end
    
end

function cleanAndLower(text)
    -- Elimina códigos de color y otros caracteres no alfanuméricos
    local cleanedText = text:gsub('{.-}', ''):gsub('[^%w ]', '')

    -- Convierte el texto a minúsculas
    cleanedText = string.lower(cleanedText)

    return cleanedText
end

function invertirLista(lista)
    local listaInvertida = {}
    local longitud = #lista

    for i = longitud, 1, -1 do
        table.insert(listaInvertida, lista[i])
    end

    return listaInvertida
end

function EjecutarCmd(cmds, time, consoleCmd)

    local chatActive = sampIsChatInputActive()
    
    if chatActive and not consoleCmd then return end

    for i, cmd in ipairs(cmds) do
        sampSendChat(cmd)

        if( i < #cmds) then
            wait(time)
        end
    end
end



